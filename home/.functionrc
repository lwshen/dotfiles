# function Extract for common file formats
# https://gist.github.com/crazyhottommy/4115e40a7ba328c771fea0f83992dc30
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

function compress() {
    if [ $# -lt 2 ]; then
        echo "Usage: compress <archive_name> <file_or_directory> [additional_files...]"
        echo "Examples:"
        echo "  compress backup.tar ~/Documents"
        echo "  compress project.zip src/ README.md"
        return 1
    fi
    
    local archive="$1"
    shift
    
    # 检查要压缩的文件/目录是否存在
    for item in "$@"; do
        if [ ! -e "$item" ]; then
            echo "Error: '$item' does not exist"
            return 1
        fi
    done
    
    case "$archive" in
        *.tar)
            echo "Creating tar archive: $archive"
            tar cf "$archive" "$@"
            ;;
        *.zip)
            echo "Creating zip archive: $archive"
            zip -r "$archive" "$@"
            ;;
        *)
            echo "Error: Unsupported archive format for '$archive'"
            echo "Supported formats: .tar, .zip"
            return 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo "Archive created successfully: $archive"
        ls -lh "$archive"
    else
        echo "Error: Failed to create archive"
        return 1
    fi
}

function backup() {
    cp "$1" "$1.backup.$(date +%Y%m%d%H%M%S)"
}

function tmc() {
    before=$(df -hl /System/Volumes/Data |awk '{print $3}' |tail -n1)
    count=0
    for snapshot in $(tmutil listlocalsnapshots /System/Volumes/Data|awk -F. '{print $4}');do
        let 'count++'
        echo "delete snapshot $snapshot"
        tmutil deletelocalsnapshots $snapshot;
    done
        after=$(df -hl /System/Volumes/Data |awk '{print $3}' |tail -n1)
    if [[ $count -ne 0 ]]; then
        echo "Total $count snapshot(s) deleted, Size change: $before ===> $after"
    else
        echo "No snapshot deleted"
    fi
}

function tml() {
    tmutil listlocalsnapshots /System/Volumes/Data|awk -F. '{print $4}'
}

function dirsize() {
    du -sh "${1:-.}" | sort -h
}

function reload() {
    source ~/.zshrc
    echo "ZSH configuration reloaded!"
}

function klaude() {
    export ANTHROPIC_BASE_URL="https://api.moonshot.cn/anthropic"
    export ANTHROPIC_AUTH_TOKEN="$MOONSHOT_API_KEY"
    unset ANTHROPIC_API_KEY
    export ANTHROPIC_SMALL_FAST_MODEL="kimi-k2-turbo-preview"
    export ANTHROPIC_MODEL="kimi-k2-turbo-preview"
    claude "$@"
}

function glaude() {
    export ANTHROPIC_BASE_URL="https://open.bigmodel.cn/api/anthropic"
    export ANTHROPIC_AUTH_TOKEN="$ZHIPU_API_KEY"
    unset ANTHROPIC_API_KEY
    # export ANTHROPIC_SMALL_FAST_MODEL="glm-4.6"
    # export ANTHROPIC_MODEL="glm-4.6"
    export API_TIMEOUT_MS=3000000
    export CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC=1
    claude "$@"
}
