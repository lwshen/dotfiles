alias gp='git push'
alias gl='git pull'
alias gr='git rebase'
alias gm='git merge'
alias gs='git stash'
alias gsl='git stash list'
alias gsp='git stash pop'
alias gc='git clone'
alias gch='git checkout'
alias gcn='git checkout -b'
alias gn='git branch --show-current'
alias gst='git status'
alias glog='git log --all --graph --decorate'
alias gp='git push'
alias gpc='git push --set-upstream origin $(git_current_branch)'
alias gml='gcm;gl'

alias gpall='find . -maxdepth 3 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull'

alias dup='docker compose up -d'
alias ddown='docker compose down'
alias dlog='docker compose logs -f -n 100'
alias dpull='docker compose pull'

alias nio="ni --prefer-offline"
alias s="nr start"
alias d="nr dev"
alias b="nr build"
alias c="nr typecheck"
alias lint="nr lint"
alias lintf="nr lint --fix"
alias nu="npx taze@latest latest -I -r -f"

alias myip='curl ipinfo.io/ip'

alias tls='tmux ls'
alias ta='tmux attach-session -t'

# 专门用来连接一些第三方的服务器或者临时开的虚拟机，既不需要确认，也不会污染 known hosts
alias sss='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

# 终端使用科学上网配置
alias ss='export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890'
alias unss='unset all_proxy http_proxy https_proxy'

alias lsdir='ls -d */' # only list directories

# 获取本机IP地址
alias ip="ifconfig | egrep '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})' -o | egrep -v '\.255\$' | grep -v '127.0.0.1'"

# 显示系统信息
#alias s='screenfetch' # run slow
alias s='neofetch'  # run fast

# function Extract for common file formats
# https://gist.github.com/crazyhottommy/4115e40a7ba328c771fea0f83992dc30
function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
   else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

function tmc() {
    before=$(df -hl /System/Volumes/Data |awk '{print $3}' |tail -n1)
    count=0
    for snapshot in $(tmutil listlocalsnapshots /System/Volumes/Data|awk -F. '{print $4}');do
        let 'count++'
        echo "delete snapshot $snapshot"
        tmutil deletelocalsnapshots $snapshot;
    done
        after=$(df -hl /System/Volumes/Data |awk '{print $3}' |tail -n1)
    if [[ $count -ne 0 ]]; then
        echo "Total $count snapshot(s) deleted, Size change: $before ===> $after"
    else
        echo "No snapshot deleted"
    fi
}

function tml() {
    tmutil listlocalsnapshots /System/Volumes/Data|awk -F. '{print $4}'
}
